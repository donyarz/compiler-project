Grammar

    0 $accept: program $end

    1 program: declaration_list

    2 declaration_list: declaration_list declaration
    3                 | declaration

    4 declaration: var_declaration
    5            | fun_declaration

    6 var_declaration: type_specifier PID ID ';' Declare
    7                | type_specifier PID ID '[' Num ']' ';' Array_declare

    8 type_specifier: "int"
    9               | "void"

   10 fun_declaration: type_specifier PID ID '(' params ')' compound_stmt

   11 params: param_list
   12       | "void"

   13 param_list: param_list ',' param
   14           | param

   15 param: type_specifier PID ID
   16      | type_specifier PID ID '[' ']'

   17 compound_stmt: Add_scope '{' local_declarations statement_list '}' Reduce_scope

   18 local_declarations: local_declarations var_declaration
   19                   | /* empty */

   20 statement_list: statement_list statement
   21               | /* empty */

   22 statement: expression_stmt
   23          | compound_stmt
   24          | selection_stmt
   25          | iteration_stmt
   26          | return_stmt
   27          | switch_stmt
   28          | output_stmt

   29 expression_stmt: expression ';' Mark_assignment
   30                | "break" ';' Break
   31                | ';'

   32 selection_stmt: "if" '(' expression ')' Save statement "endif" Jpf
   33               | "if" '(' expression ')' Save statement "else" Jpf_save statement Jp "endif"

   34 iteration_stmt: Jmp_save "while" Label '(' expression ')' Save statement While

   35 return_stmt: "return" ';'
   36            | "return" expression ';'

   37 switch_stmt: Jmp_save "switch" '(' expression ')' Add_scope '{' "case" Num Eq_switch ':' Save statement_list case_stmts default_stmt '}' Switch_Jmp
   38            | Jmp_save "switch" '(' expression ')' Add_scope '{' "default" ':' statement_list '}' Switch_Jmp

   39 case_stmts: case_stmts case_stmt
   40           | /* empty */

   41 case_stmt: Jpf "case" Num Eq_switch ':' Save statement_list

   42 default_stmt: Jpf "default" ':' statement_list
   43             | /* empty */

   44 expression: var '=' expression Assign
   45           | simple_expression

   46 var: PID ID
   47    | PID ID '[' expression ']' Array_access

   48 simple_expression: additive_expression lt additive_expression Lt
   49                  | additive_expression eq additive_expression Eq
   50                  | additive_expression

   51 lt: '<'

   52 additive_expression: additive_expression addop term Add
   53                    | additive_expression subop term Sub
   54                    | term

   55 output_stmt: "output" '(' simple_expression ')' ';' Print

   56 term: term mulop factor Mult
   57     | term divop factor Div
   58     | factor

   59 eq: "=="

   60 factor: '(' expression ')'
   61       | var
   62       | call
   63       | Num

   64 call: PID ID '(' args ')'

   65 args: arg_list
   66     | /* empty */

   67 arg_list: arg_list ',' expression
   68         | expression

   69 addop: '+'

   70 subop: '-'

   71 mulop: '*'

   72 divop: '/'

   73 PID: /* empty */

   74 Assign: /* empty */

   75 Add: /* empty */

   76 Sub: /* empty */

   77 Mult: /* empty */

   78 Div: /* empty */

   79 While: /* empty */

   80 Label: /* empty */

   81 Save: /* empty */

   82 Jpf: /* empty */

   83 Jp: /* empty */

   84 Jpf_save: /* empty */

   85 Print: /* empty */

   86 Lt: /* empty */

   87 Eq: /* empty */

   88 Declare: /* empty */

   89 Num: Save_constant NUM

   90 Save_constant: /* empty */

   91 Array_declare: /* empty */

   92 Array_access: /* empty */

   93 Jmp_save: /* empty */

   94 Eq_switch: /* empty */

   95 Break: /* empty */

   96 Switch_Jmp: /* empty */

   97 Add_scope: /* empty */

   98 Reduce_scope: /* empty */

   99 Mark_assignment: /* empty */


Terminals, with rules where they appear

$end (0) 0
'(' (40) 10 32 33 34 37 38 55 60 64
')' (41) 10 32 33 34 37 38 55 60 64
'*' (42) 71
'+' (43) 69
',' (44) 13 67
'-' (45) 70
'/' (47) 72
':' (58) 37 38 41 42
';' (59) 6 7 29 30 31 35 36 55
'<' (60) 51
'=' (61) 44
'[' (91) 7 16 47
']' (93) 7 16 47
'{' (123) 17 37 38
'}' (125) 17 37 38
error (256)
NUM (258) 89
ID (259) 6 7 10 15 16 46 47 64
"int" (260) 8
"void" (261) 9 12
"break" (262) 30
"if" (263) 32 33
"endif" (264) 32 33
"else" (265) 33
"while" (266) 34
"return" (267) 35 36
"switch" (268) 37 38
"case" (269) 37 41
"default" (270) 38 42
"output" (271) 55
"==" (272) 59


Nonterminals, with rules where they appear

$accept (33)
    on left: 0
program (34)
    on left: 1, on right: 0
declaration_list (35)
    on left: 2 3, on right: 1 2
declaration (36)
    on left: 4 5, on right: 2 3
var_declaration (37)
    on left: 6 7, on right: 4 18
type_specifier (38)
    on left: 8 9, on right: 6 7 10 15 16
fun_declaration (39)
    on left: 10, on right: 5
params (40)
    on left: 11 12, on right: 10
param_list (41)
    on left: 13 14, on right: 11 13
param (42)
    on left: 15 16, on right: 13 14
compound_stmt (43)
    on left: 17, on right: 10 23
local_declarations (44)
    on left: 18 19, on right: 17 18
statement_list (45)
    on left: 20 21, on right: 17 20 37 38 41 42
statement (46)
    on left: 22 23 24 25 26 27 28, on right: 20 32 33 34
expression_stmt (47)
    on left: 29 30 31, on right: 22
selection_stmt (48)
    on left: 32 33, on right: 24
iteration_stmt (49)
    on left: 34, on right: 25
return_stmt (50)
    on left: 35 36, on right: 26
switch_stmt (51)
    on left: 37 38, on right: 27
case_stmts (52)
    on left: 39 40, on right: 37 39
case_stmt (53)
    on left: 41, on right: 39
default_stmt (54)
    on left: 42 43, on right: 37
expression (55)
    on left: 44 45, on right: 29 32 33 34 36 37 38 44 47 60 67 68
var (56)
    on left: 46 47, on right: 44 61
simple_expression (57)
    on left: 48 49 50, on right: 45 55
lt (58)
    on left: 51, on right: 48
additive_expression (59)
    on left: 52 53 54, on right: 48 49 50 52 53
output_stmt (60)
    on left: 55, on right: 28
term (61)
    on left: 56 57 58, on right: 52 53 54 56 57
eq (62)
    on left: 59, on right: 49
factor (63)
    on left: 60 61 62 63, on right: 56 57 58
call (64)
    on left: 64, on right: 62
args (65)
    on left: 65 66, on right: 64
arg_list (66)
    on left: 67 68, on right: 65 67
addop (67)
    on left: 69, on right: 52
subop (68)
    on left: 70, on right: 53
mulop (69)
    on left: 71, on right: 56
divop (70)
    on left: 72, on right: 57
PID (71)
    on left: 73, on right: 6 7 10 15 16 46 47 64
Assign (72)
    on left: 74, on right: 44
Add (73)
    on left: 75, on right: 52
Sub (74)
    on left: 76, on right: 53
Mult (75)
    on left: 77, on right: 56
Div (76)
    on left: 78, on right: 57
While (77)
    on left: 79, on right: 34
Label (78)
    on left: 80, on right: 34
Save (79)
    on left: 81, on right: 32 33 34 37 41
Jpf (80)
    on left: 82, on right: 32 41 42
Jp (81)
    on left: 83, on right: 33
Jpf_save (82)
    on left: 84, on right: 33
Print (83)
    on left: 85, on right: 55
Lt (84)
    on left: 86, on right: 48
Eq (85)
    on left: 87, on right: 49
Declare (86)
    on left: 88, on right: 6
Num (87)
    on left: 89, on right: 7 37 41 63
Save_constant (88)
    on left: 90, on right: 89
Array_declare (89)
    on left: 91, on right: 7
Array_access (90)
    on left: 92, on right: 47
Jmp_save (91)
    on left: 93, on right: 34 37 38
Eq_switch (92)
    on left: 94, on right: 37 41
Break (93)
    on left: 95, on right: 30
Switch_Jmp (94)
    on left: 96, on right: 37 38
Add_scope (95)
    on left: 97, on right: 17 37 38
Reduce_scope (96)
    on left: 98, on right: 17
Mark_assignment (97)
    on left: 99, on right: 29


state 0

    0 $accept: . program $end
    1 program: . declaration_list
    2 declaration_list: . declaration_list declaration
    3                 | . declaration
    4 declaration: . var_declaration
    5            | . fun_declaration
    6 var_declaration: . type_specifier PID ID ';' Declare
    7                | . type_specifier PID ID '[' Num ']' ';' Array_declare
    8 type_specifier: . "int"
    9               | . "void"
   10 fun_declaration: . type_specifier PID ID '(' params ')' compound_stmt

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    program           go to state 3
    declaration_list  go to state 4
    declaration       go to state 5
    var_declaration   go to state 6
    type_specifier    go to state 7
    fun_declaration   go to state 8


state 1

    8 type_specifier: "int" .

    $default  reduce using rule 8 (type_specifier)


state 2

    9 type_specifier: "void" .

    $default  reduce using rule 9 (type_specifier)


state 3

    0 $accept: program . $end

    $end  shift, and go to state 9


state 4

    1 program: declaration_list .  [$end]
    2 declaration_list: declaration_list . declaration
    4 declaration: . var_declaration
    5            | . fun_declaration
    6 var_declaration: . type_specifier PID ID ';' Declare
    7                | . type_specifier PID ID '[' Num ']' ';' Array_declare
    8 type_specifier: . "int"
    9               | . "void"
   10 fun_declaration: . type_specifier PID ID '(' params ')' compound_stmt

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    $default  reduce using rule 1 (program)

    declaration      go to state 10
    var_declaration  go to state 6
    type_specifier   go to state 7
    fun_declaration  go to state 8


state 5

    3 declaration_list: declaration .

    $default  reduce using rule 3 (declaration_list)


state 6

    4 declaration: var_declaration .

    $default  reduce using rule 4 (declaration)


state 7

    6 var_declaration: type_specifier . PID ID ';' Declare
    7                | type_specifier . PID ID '[' Num ']' ';' Array_declare
   10 fun_declaration: type_specifier . PID ID '(' params ')' compound_stmt
   73 PID: .

    $default  reduce using rule 73 (PID)

    PID  go to state 11


state 8

    5 declaration: fun_declaration .

    $default  reduce using rule 5 (declaration)


state 9

    0 $accept: program $end .

    $default  accept


state 10

    2 declaration_list: declaration_list declaration .

    $default  reduce using rule 2 (declaration_list)


state 11

    6 var_declaration: type_specifier PID . ID ';' Declare
    7                | type_specifier PID . ID '[' Num ']' ';' Array_declare
   10 fun_declaration: type_specifier PID . ID '(' params ')' compound_stmt

    ID  shift, and go to state 12


state 12

    6 var_declaration: type_specifier PID ID . ';' Declare
    7                | type_specifier PID ID . '[' Num ']' ';' Array_declare
   10 fun_declaration: type_specifier PID ID . '(' params ')' compound_stmt

    ';'  shift, and go to state 13
    '['  shift, and go to state 14
    '('  shift, and go to state 15


state 13

    6 var_declaration: type_specifier PID ID ';' . Declare
   88 Declare: .

    $default  reduce using rule 88 (Declare)

    Declare  go to state 16


state 14

    7 var_declaration: type_specifier PID ID '[' . Num ']' ';' Array_declare
   89 Num: . Save_constant NUM
   90 Save_constant: .

    $default  reduce using rule 90 (Save_constant)

    Num            go to state 17
    Save_constant  go to state 18


state 15

    8 type_specifier: . "int"
    9               | . "void"
   10 fun_declaration: type_specifier PID ID '(' . params ')' compound_stmt
   11 params: . param_list
   12       | . "void"
   13 param_list: . param_list ',' param
   14           | . param
   15 param: . type_specifier PID ID
   16      | . type_specifier PID ID '[' ']'

    "int"   shift, and go to state 1
    "void"  shift, and go to state 19

    type_specifier  go to state 20
    params          go to state 21
    param_list      go to state 22
    param           go to state 23


state 16

    6 var_declaration: type_specifier PID ID ';' Declare .

    $default  reduce using rule 6 (var_declaration)


state 17

    7 var_declaration: type_specifier PID ID '[' Num . ']' ';' Array_declare

    ']'  shift, and go to state 24


state 18

   89 Num: Save_constant . NUM

    NUM  shift, and go to state 25


state 19

    9 type_specifier: "void" .  [ID]
   12 params: "void" .  [')']

    ')'       reduce using rule 12 (params)
    $default  reduce using rule 9 (type_specifier)


state 20

   15 param: type_specifier . PID ID
   16      | type_specifier . PID ID '[' ']'
   73 PID: .

    $default  reduce using rule 73 (PID)

    PID  go to state 26


state 21

   10 fun_declaration: type_specifier PID ID '(' params . ')' compound_stmt

    ')'  shift, and go to state 27


state 22

   11 params: param_list .  [')']
   13 param_list: param_list . ',' param

    ','  shift, and go to state 28

    $default  reduce using rule 11 (params)


state 23

   14 param_list: param .

    $default  reduce using rule 14 (param_list)


state 24

    7 var_declaration: type_specifier PID ID '[' Num ']' . ';' Array_declare

    ';'  shift, and go to state 29


state 25

   89 Num: Save_constant NUM .

    $default  reduce using rule 89 (Num)


state 26

   15 param: type_specifier PID . ID
   16      | type_specifier PID . ID '[' ']'

    ID  shift, and go to state 30


state 27

   10 fun_declaration: type_specifier PID ID '(' params ')' . compound_stmt
   17 compound_stmt: . Add_scope '{' local_declarations statement_list '}' Reduce_scope
   97 Add_scope: .

    $default  reduce using rule 97 (Add_scope)

    compound_stmt  go to state 31
    Add_scope      go to state 32


state 28

    8 type_specifier: . "int"
    9               | . "void"
   13 param_list: param_list ',' . param
   15 param: . type_specifier PID ID
   16      | . type_specifier PID ID '[' ']'

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    type_specifier  go to state 20
    param           go to state 33


state 29

    7 var_declaration: type_specifier PID ID '[' Num ']' ';' . Array_declare
   91 Array_declare: .

    $default  reduce using rule 91 (Array_declare)

    Array_declare  go to state 34


state 30

   15 param: type_specifier PID ID .  [')', ',']
   16      | type_specifier PID ID . '[' ']'

    '['  shift, and go to state 35

    $default  reduce using rule 15 (param)


state 31

   10 fun_declaration: type_specifier PID ID '(' params ')' compound_stmt .

    $default  reduce using rule 10 (fun_declaration)


state 32

   17 compound_stmt: Add_scope . '{' local_declarations statement_list '}' Reduce_scope

    '{'  shift, and go to state 36


state 33

   13 param_list: param_list ',' param .

    $default  reduce using rule 13 (param_list)


state 34

    7 var_declaration: type_specifier PID ID '[' Num ']' ';' Array_declare .

    $default  reduce using rule 7 (var_declaration)


state 35

   16 param: type_specifier PID ID '[' . ']'

    ']'  shift, and go to state 37


state 36

   17 compound_stmt: Add_scope '{' . local_declarations statement_list '}' Reduce_scope
   18 local_declarations: . local_declarations var_declaration
   19                   | .

    $default  reduce using rule 19 (local_declarations)

    local_declarations  go to state 38


state 37

   16 param: type_specifier PID ID '[' ']' .

    $default  reduce using rule 16 (param)


state 38

    6 var_declaration: . type_specifier PID ID ';' Declare
    7                | . type_specifier PID ID '[' Num ']' ';' Array_declare
    8 type_specifier: . "int"
    9               | . "void"
   17 compound_stmt: Add_scope '{' local_declarations . statement_list '}' Reduce_scope
   18 local_declarations: local_declarations . var_declaration
   20 statement_list: . statement_list statement
   21               | .  [NUM, ID, ';', '(', '{', '}', "break", "if", "while", "return", "switch", "output"]

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    $default  reduce using rule 21 (statement_list)

    var_declaration  go to state 39
    type_specifier   go to state 40
    statement_list   go to state 41


state 39

   18 local_declarations: local_declarations var_declaration .

    $default  reduce using rule 18 (local_declarations)


state 40

    6 var_declaration: type_specifier . PID ID ';' Declare
    7                | type_specifier . PID ID '[' Num ']' ';' Array_declare
   73 PID: .

    $default  reduce using rule 73 (PID)

    PID  go to state 42


state 41

   17 compound_stmt: . Add_scope '{' local_declarations statement_list '}' Reduce_scope
   17              | Add_scope '{' local_declarations statement_list . '}' Reduce_scope
   20 statement_list: statement_list . statement
   22 statement: . expression_stmt
   23          | . compound_stmt
   24          | . selection_stmt
   25          | . iteration_stmt
   26          | . return_stmt
   27          | . switch_stmt
   28          | . output_stmt
   29 expression_stmt: . expression ';' Mark_assignment
   30                | . "break" ';' Break
   31                | . ';'
   32 selection_stmt: . "if" '(' expression ')' Save statement "endif" Jpf
   33               | . "if" '(' expression ')' Save statement "else" Jpf_save statement Jp "endif"
   34 iteration_stmt: . Jmp_save "while" Label '(' expression ')' Save statement While
   35 return_stmt: . "return" ';'
   36            | . "return" expression ';'
   37 switch_stmt: . Jmp_save "switch" '(' expression ')' Add_scope '{' "case" Num Eq_switch ':' Save statement_list case_stmts default_stmt '}' Switch_Jmp
   38            | . Jmp_save "switch" '(' expression ')' Add_scope '{' "default" ':' statement_list '}' Switch_Jmp
   44 expression: . var '=' expression Assign
   45           | . simple_expression
   46 var: . PID ID
   47    | . PID ID '[' expression ']' Array_access
   48 simple_expression: . additive_expression lt additive_expression Lt
   49                  | . additive_expression eq additive_expression Eq
   50                  | . additive_expression
   52 additive_expression: . additive_expression addop term Add
   53                    | . additive_expression subop term Sub
   54                    | . term
   55 output_stmt: . "output" '(' simple_expression ')' ';' Print
   56 term: . term mulop factor Mult
   57     | . term divop factor Div
   58     | . factor
   60 factor: . '(' expression ')'
   61       | . var
   62       | . call
   63       | . Num
   64 call: . PID ID '(' args ')'
   73 PID: .  [ID]
   89 Num: . Save_constant NUM
   90 Save_constant: .  [NUM]
   93 Jmp_save: .  ["while", "switch"]
   97 Add_scope: .  ['{']

    ';'       shift, and go to state 43
    '('       shift, and go to state 44
    '}'       shift, and go to state 45
    "break"   shift, and go to state 46
    "if"      shift, and go to state 47
    "return"  shift, and go to state 48
    "output"  shift, and go to state 49

    NUM       reduce using rule 90 (Save_constant)
    ID        reduce using rule 73 (PID)
    '{'       reduce using rule 97 (Add_scope)
    $default  reduce using rule 93 (Jmp_save)

    compound_stmt        go to state 50
    statement            go to state 51
    expression_stmt      go to state 52
    selection_stmt       go to state 53
    iteration_stmt       go to state 54
    return_stmt          go to state 55
    switch_stmt          go to state 56
    expression           go to state 57
    var                  go to state 58
    simple_expression    go to state 59
    additive_expression  go to state 60
    output_stmt          go to state 61
    term                 go to state 62
    factor               go to state 63
    call                 go to state 64
    PID                  go to state 65
    Num                  go to state 66
    Save_constant        go to state 18
    Jmp_save             go to state 67
    Add_scope            go to state 32


state 42

    6 var_declaration: type_specifier PID . ID ';' Declare
    7                | type_specifier PID . ID '[' Num ']' ';' Array_declare

    ID  shift, and go to state 68


state 43

   31 expression_stmt: ';' .

    $default  reduce using rule 31 (expression_stmt)


state 44

   44 expression: . var '=' expression Assign
   45           | . simple_expression
   46 var: . PID ID
   47    | . PID ID '[' expression ']' Array_access
   48 simple_expression: . additive_expression lt additive_expression Lt
   49                  | . additive_expression eq additive_expression Eq
   50                  | . additive_expression
   52 additive_expression: . additive_expression addop term Add
   53                    | . additive_expression subop term Sub
   54                    | . term
   56 term: . term mulop factor Mult
   57     | . term divop factor Div
   58     | . factor
   60 factor: . '(' expression ')'
   60       | '(' . expression ')'
   61       | . var
   62       | . call
   63       | . Num
   64 call: . PID ID '(' args ')'
   73 PID: .  [ID]
   89 Num: . Save_constant NUM
   90 Save_constant: .  [NUM]

    '('  shift, and go to state 44

    NUM       reduce using rule 90 (Save_constant)
    $default  reduce using rule 73 (PID)

    expression           go to state 69
    var                  go to state 58
    simple_expression    go to state 59
    additive_expression  go to state 60
    term                 go to state 62
    factor               go to state 63
    call                 go to state 64
    PID                  go to state 65
    Num                  go to state 66
    Save_constant        go to state 18


state 45

   17 compound_stmt: Add_scope '{' local_declarations statement_list '}' . Reduce_scope
   98 Reduce_scope: .

    $default  reduce using rule 98 (Reduce_scope)

    Reduce_scope  go to state 70


state 46

   30 expression_stmt: "break" . ';' Break

    ';'  shift, and go to state 71


state 47

   32 selection_stmt: "if" . '(' expression ')' Save statement "endif" Jpf
   33               | "if" . '(' expression ')' Save statement "else" Jpf_save statement Jp "endif"

    '('  shift, and go to state 72


state 48

   35 return_stmt: "return" . ';'
   36            | "return" . expression ';'
   44 expression: . var '=' expression Assign
   45           | . simple_expression
   46 var: . PID ID
   47    | . PID ID '[' expression ']' Array_access
   48 simple_expression: . additive_expression lt additive_expression Lt
   49                  | . additive_expression eq additive_expression Eq
   50                  | . additive_expression
   52 additive_expression: . additive_expression addop term Add
   53                    | . additive_expression subop term Sub
   54                    | . term
   56 term: . term mulop factor Mult
   57     | . term divop factor Div
   58     | . factor
   60 factor: . '(' expression ')'
   61       | . var
   62       | . call
   63       | . Num
   64 call: . PID ID '(' args ')'
   73 PID: .  [ID]
   89 Num: . Save_constant NUM
   90 Save_constant: .  [NUM]

    ';'  shift, and go to state 73
    '('  shift, and go to state 44

    NUM       reduce using rule 90 (Save_constant)
    $default  reduce using rule 73 (PID)

    expression           go to state 74
    var                  go to state 58
    simple_expression    go to state 59
    additive_expression  go to state 60
    term                 go to state 62
    factor               go to state 63
    call                 go to state 64
    PID                  go to state 65
    Num                  go to state 66
    Save_constant        go to state 18


state 49

   55 output_stmt: "output" . '(' simple_expression ')' ';' Print

    '('  shift, and go to state 75


state 50

   23 statement: compound_stmt .

    $default  reduce using rule 23 (statement)


state 51

   20 statement_list: statement_list statement .

    $default  reduce using rule 20 (statement_list)


state 52

   22 statement: expression_stmt .

    $default  reduce using rule 22 (statement)


state 53

   24 statement: selection_stmt .

    $default  reduce using rule 24 (statement)


state 54

   25 statement: iteration_stmt .

    $default  reduce using rule 25 (statement)


state 55

   26 statement: return_stmt .

    $default  reduce using rule 26 (statement)


state 56

   27 statement: switch_stmt .

    $default  reduce using rule 27 (statement)


state 57

   29 expression_stmt: expression . ';' Mark_assignment

    ';'  shift, and go to state 76


state 58

   44 expression: var . '=' expression Assign
   61 factor: var .  [';', ']', ')', ',', '<', "==", '+', '-', '*', '/']

    '='  shift, and go to state 77

    $default  reduce using rule 61 (factor)


state 59

   45 expression: simple_expression .

    $default  reduce using rule 45 (expression)


state 60

   48 simple_expression: additive_expression . lt additive_expression Lt
   49                  | additive_expression . eq additive_expression Eq
   50                  | additive_expression .  [';', ']', ')', ',']
   51 lt: . '<'
   52 additive_expression: additive_expression . addop term Add
   53                    | additive_expression . subop term Sub
   59 eq: . "=="
   69 addop: . '+'
   70 subop: . '-'

    '<'   shift, and go to state 78
    "=="  shift, and go to state 79
    '+'   shift, and go to state 80
    '-'   shift, and go to state 81

    $default  reduce using rule 50 (simple_expression)

    lt     go to state 82
    eq     go to state 83
    addop  go to state 84
    subop  go to state 85


state 61

   28 statement: output_stmt .

    $default  reduce using rule 28 (statement)


state 62

   54 additive_expression: term .  [';', ']', ')', ',', '<', "==", '+', '-']
   56 term: term . mulop factor Mult
   57     | term . divop factor Div
   71 mulop: . '*'
   72 divop: . '/'

    '*'  shift, and go to state 86
    '/'  shift, and go to state 87

    $default  reduce using rule 54 (additive_expression)

    mulop  go to state 88
    divop  go to state 89


state 63

   58 term: factor .

    $default  reduce using rule 58 (term)


state 64

   62 factor: call .

    $default  reduce using rule 62 (factor)


state 65

   46 var: PID . ID
   47    | PID . ID '[' expression ']' Array_access
   64 call: PID . ID '(' args ')'

    ID  shift, and go to state 90


state 66

   63 factor: Num .

    $default  reduce using rule 63 (factor)


state 67

   34 iteration_stmt: Jmp_save . "while" Label '(' expression ')' Save statement While
   37 switch_stmt: Jmp_save . "switch" '(' expression ')' Add_scope '{' "case" Num Eq_switch ':' Save statement_list case_stmts default_stmt '}' Switch_Jmp
   38            | Jmp_save . "switch" '(' expression ')' Add_scope '{' "default" ':' statement_list '}' Switch_Jmp

    "while"   shift, and go to state 91
    "switch"  shift, and go to state 92


state 68

    6 var_declaration: type_specifier PID ID . ';' Declare
    7                | type_specifier PID ID . '[' Num ']' ';' Array_declare

    ';'  shift, and go to state 13
    '['  shift, and go to state 14


state 69

   60 factor: '(' expression . ')'

    ')'  shift, and go to state 93


state 70

   17 compound_stmt: Add_scope '{' local_declarations statement_list '}' Reduce_scope .

    $default  reduce using rule 17 (compound_stmt)


state 71

   30 expression_stmt: "break" ';' . Break
   95 Break: .

    $default  reduce using rule 95 (Break)

    Break  go to state 94


state 72

   32 selection_stmt: "if" '(' . expression ')' Save statement "endif" Jpf
   33               | "if" '(' . expression ')' Save statement "else" Jpf_save statement Jp "endif"
   44 expression: . var '=' expression Assign
   45           | . simple_expression
   46 var: . PID ID
   47    | . PID ID '[' expression ']' Array_access
   48 simple_expression: . additive_expression lt additive_expression Lt
   49                  | . additive_expression eq additive_expression Eq
   50                  | . additive_expression
   52 additive_expression: . additive_expression addop term Add
   53                    | . additive_expression subop term Sub
   54                    | . term
   56 term: . term mulop factor Mult
   57     | . term divop factor Div
   58     | . factor
   60 factor: . '(' expression ')'
   61       | . var
   62       | . call
   63       | . Num
   64 call: . PID ID '(' args ')'
   73 PID: .  [ID]
   89 Num: . Save_constant NUM
   90 Save_constant: .  [NUM]

    '('  shift, and go to state 44

    NUM       reduce using rule 90 (Save_constant)
    $default  reduce using rule 73 (PID)

    expression           go to state 95
    var                  go to state 58
    simple_expression    go to state 59
    additive_expression  go to state 60
    term                 go to state 62
    factor               go to state 63
    call                 go to state 64
    PID                  go to state 65
    Num                  go to state 66
    Save_constant        go to state 18


state 73

   35 return_stmt: "return" ';' .

    $default  reduce using rule 35 (return_stmt)


state 74

   36 return_stmt: "return" expression . ';'

    ';'  shift, and go to state 96


state 75

   46 var: . PID ID
   47    | . PID ID '[' expression ']' Array_access
   48 simple_expression: . additive_expression lt additive_expression Lt
   49                  | . additive_expression eq additive_expression Eq
   50                  | . additive_expression
   52 additive_expression: . additive_expression addop term Add
   53                    | . additive_expression subop term Sub
   54                    | . term
   55 output_stmt: "output" '(' . simple_expression ')' ';' Print
   56 term: . term mulop factor Mult
   57     | . term divop factor Div
   58     | . factor
   60 factor: . '(' expression ')'
   61       | . var
   62       | . call
   63       | . Num
   64 call: . PID ID '(' args ')'
   73 PID: .  [ID]
   89 Num: . Save_constant NUM
   90 Save_constant: .  [NUM]

    '('  shift, and go to state 44

    NUM       reduce using rule 90 (Save_constant)
    $default  reduce using rule 73 (PID)

    var                  go to state 97
    simple_expression    go to state 98
    additive_expression  go to state 60
    term                 go to state 62
    factor               go to state 63
    call                 go to state 64
    PID                  go to state 65
    Num                  go to state 66
    Save_constant        go to state 18


state 76

   29 expression_stmt: expression ';' . Mark_assignment
   99 Mark_assignment: .

    $default  reduce using rule 99 (Mark_assignment)

    Mark_assignment  go to state 99


state 77

   44 expression: . var '=' expression Assign
   44           | var '=' . expression Assign
   45           | . simple_expression
   46 var: . PID ID
   47    | . PID ID '[' expression ']' Array_access
   48 simple_expression: . additive_expression lt additive_expression Lt
   49                  | . additive_expression eq additive_expression Eq
   50                  | . additive_expression
   52 additive_expression: . additive_expression addop term Add
   53                    | . additive_expression subop term Sub
   54                    | . term
   56 term: . term mulop factor Mult
   57     | . term divop factor Div
   58     | . factor
   60 factor: . '(' expression ')'
   61       | . var
   62       | . call
   63       | . Num
   64 call: . PID ID '(' args ')'
   73 PID: .  [ID]
   89 Num: . Save_constant NUM
   90 Save_constant: .  [NUM]

    '('  shift, and go to state 44

    NUM       reduce using rule 90 (Save_constant)
    $default  reduce using rule 73 (PID)

    expression           go to state 100
    var                  go to state 58
    simple_expression    go to state 59
    additive_expression  go to state 60
    term                 go to state 62
    factor               go to state 63
    call                 go to state 64
    PID                  go to state 65
    Num                  go to state 66
    Save_constant        go to state 18


state 78

   51 lt: '<' .

    $default  reduce using rule 51 (lt)


state 79

   59 eq: "==" .

    $default  reduce using rule 59 (eq)


state 80

   69 addop: '+' .

    $default  reduce using rule 69 (addop)


state 81

   70 subop: '-' .

    $default  reduce using rule 70 (subop)


state 82

   46 var: . PID ID
   47    | . PID ID '[' expression ']' Array_access
   48 simple_expression: additive_expression lt . additive_expression Lt
   52 additive_expression: . additive_expression addop term Add
   53                    | . additive_expression subop term Sub
   54                    | . term
   56 term: . term mulop factor Mult
   57     | . term divop factor Div
   58     | . factor
   60 factor: . '(' expression ')'
   61       | . var
   62       | . call
   63       | . Num
   64 call: . PID ID '(' args ')'
   73 PID: .  [ID]
   89 Num: . Save_constant NUM
   90 Save_constant: .  [NUM]

    '('  shift, and go to state 44

    NUM       reduce using rule 90 (Save_constant)
    $default  reduce using rule 73 (PID)

    var                  go to state 97
    additive_expression  go to state 101
    term                 go to state 62
    factor               go to state 63
    call                 go to state 64
    PID                  go to state 65
    Num                  go to state 66
    Save_constant        go to state 18


state 83

   46 var: . PID ID
   47    | . PID ID '[' expression ']' Array_access
   49 simple_expression: additive_expression eq . additive_expression Eq
   52 additive_expression: . additive_expression addop term Add
   53                    | . additive_expression subop term Sub
   54                    | . term
   56 term: . term mulop factor Mult
   57     | . term divop factor Div
   58     | . factor
   60 factor: . '(' expression ')'
   61       | . var
   62       | . call
   63       | . Num
   64 call: . PID ID '(' args ')'
   73 PID: .  [ID]
   89 Num: . Save_constant NUM
   90 Save_constant: .  [NUM]

    '('  shift, and go to state 44

    NUM       reduce using rule 90 (Save_constant)
    $default  reduce using rule 73 (PID)

    var                  go to state 97
    additive_expression  go to state 102
    term                 go to state 62
    factor               go to state 63
    call                 go to state 64
    PID                  go to state 65
    Num                  go to state 66
    Save_constant        go to state 18


state 84

   46 var: . PID ID
   47    | . PID ID '[' expression ']' Array_access
   52 additive_expression: additive_expression addop . term Add
   56 term: . term mulop factor Mult
   57     | . term divop factor Div
   58     | . factor
   60 factor: . '(' expression ')'
   61       | . var
   62       | . call
   63       | . Num
   64 call: . PID ID '(' args ')'
   73 PID: .  [ID]
   89 Num: . Save_constant NUM
   90 Save_constant: .  [NUM]

    '('  shift, and go to state 44

    NUM       reduce using rule 90 (Save_constant)
    $default  reduce using rule 73 (PID)

    var            go to state 97
    term           go to state 103
    factor         go to state 63
    call           go to state 64
    PID            go to state 65
    Num            go to state 66
    Save_constant  go to state 18


state 85

   46 var: . PID ID
   47    | . PID ID '[' expression ']' Array_access
   53 additive_expression: additive_expression subop . term Sub
   56 term: . term mulop factor Mult
   57     | . term divop factor Div
   58     | . factor
   60 factor: . '(' expression ')'
   61       | . var
   62       | . call
   63       | . Num
   64 call: . PID ID '(' args ')'
   73 PID: .  [ID]
   89 Num: . Save_constant NUM
   90 Save_constant: .  [NUM]

    '('  shift, and go to state 44

    NUM       reduce using rule 90 (Save_constant)
    $default  reduce using rule 73 (PID)

    var            go to state 97
    term           go to state 104
    factor         go to state 63
    call           go to state 64
    PID            go to state 65
    Num            go to state 66
    Save_constant  go to state 18


state 86

   71 mulop: '*' .

    $default  reduce using rule 71 (mulop)


state 87

   72 divop: '/' .

    $default  reduce using rule 72 (divop)


state 88

   46 var: . PID ID
   47    | . PID ID '[' expression ']' Array_access
   56 term: term mulop . factor Mult
   60 factor: . '(' expression ')'
   61       | . var
   62       | . call
   63       | . Num
   64 call: . PID ID '(' args ')'
   73 PID: .  [ID]
   89 Num: . Save_constant NUM
   90 Save_constant: .  [NUM]

    '('  shift, and go to state 44

    NUM       reduce using rule 90 (Save_constant)
    $default  reduce using rule 73 (PID)

    var            go to state 97
    factor         go to state 105
    call           go to state 64
    PID            go to state 65
    Num            go to state 66
    Save_constant  go to state 18


state 89

   46 var: . PID ID
   47    | . PID ID '[' expression ']' Array_access
   57 term: term divop . factor Div
   60 factor: . '(' expression ')'
   61       | . var
   62       | . call
   63       | . Num
   64 call: . PID ID '(' args ')'
   73 PID: .  [ID]
   89 Num: . Save_constant NUM
   90 Save_constant: .  [NUM]

    '('  shift, and go to state 44

    NUM       reduce using rule 90 (Save_constant)
    $default  reduce using rule 73 (PID)

    var            go to state 97
    factor         go to state 106
    call           go to state 64
    PID            go to state 65
    Num            go to state 66
    Save_constant  go to state 18


state 90

   46 var: PID ID .  [';', ']', ')', ',', '=', '<', "==", '+', '-', '*', '/']
   47    | PID ID . '[' expression ']' Array_access
   64 call: PID ID . '(' args ')'

    '['  shift, and go to state 107
    '('  shift, and go to state 108

    $default  reduce using rule 46 (var)


state 91

   34 iteration_stmt: Jmp_save "while" . Label '(' expression ')' Save statement While
   80 Label: .

    $default  reduce using rule 80 (Label)

    Label  go to state 109


state 92

   37 switch_stmt: Jmp_save "switch" . '(' expression ')' Add_scope '{' "case" Num Eq_switch ':' Save statement_list case_stmts default_stmt '}' Switch_Jmp
   38            | Jmp_save "switch" . '(' expression ')' Add_scope '{' "default" ':' statement_list '}' Switch_Jmp

    '('  shift, and go to state 110


state 93

   60 factor: '(' expression ')' .

    $default  reduce using rule 60 (factor)


state 94

   30 expression_stmt: "break" ';' Break .

    $default  reduce using rule 30 (expression_stmt)


state 95

   32 selection_stmt: "if" '(' expression . ')' Save statement "endif" Jpf
   33               | "if" '(' expression . ')' Save statement "else" Jpf_save statement Jp "endif"

    ')'  shift, and go to state 111


state 96

   36 return_stmt: "return" expression ';' .

    $default  reduce using rule 36 (return_stmt)


state 97

   61 factor: var .

    $default  reduce using rule 61 (factor)


state 98

   55 output_stmt: "output" '(' simple_expression . ')' ';' Print

    ')'  shift, and go to state 112


state 99

   29 expression_stmt: expression ';' Mark_assignment .

    $default  reduce using rule 29 (expression_stmt)


state 100

   44 expression: var '=' expression . Assign
   74 Assign: .

    $default  reduce using rule 74 (Assign)

    Assign  go to state 113


state 101

   48 simple_expression: additive_expression lt additive_expression . Lt
   52 additive_expression: additive_expression . addop term Add
   53                    | additive_expression . subop term Sub
   69 addop: . '+'
   70 subop: . '-'
   86 Lt: .  [';', ']', ')', ',']

    '+'  shift, and go to state 80
    '-'  shift, and go to state 81

    $default  reduce using rule 86 (Lt)

    addop  go to state 84
    subop  go to state 85
    Lt     go to state 114


state 102

   49 simple_expression: additive_expression eq additive_expression . Eq
   52 additive_expression: additive_expression . addop term Add
   53                    | additive_expression . subop term Sub
   69 addop: . '+'
   70 subop: . '-'
   87 Eq: .  [';', ']', ')', ',']

    '+'  shift, and go to state 80
    '-'  shift, and go to state 81

    $default  reduce using rule 87 (Eq)

    addop  go to state 84
    subop  go to state 85
    Eq     go to state 115


state 103

   52 additive_expression: additive_expression addop term . Add
   56 term: term . mulop factor Mult
   57     | term . divop factor Div
   71 mulop: . '*'
   72 divop: . '/'
   75 Add: .  [';', ']', ')', ',', '<', "==", '+', '-']

    '*'  shift, and go to state 86
    '/'  shift, and go to state 87

    $default  reduce using rule 75 (Add)

    mulop  go to state 88
    divop  go to state 89
    Add    go to state 116


state 104

   53 additive_expression: additive_expression subop term . Sub
   56 term: term . mulop factor Mult
   57     | term . divop factor Div
   71 mulop: . '*'
   72 divop: . '/'
   76 Sub: .  [';', ']', ')', ',', '<', "==", '+', '-']

    '*'  shift, and go to state 86
    '/'  shift, and go to state 87

    $default  reduce using rule 76 (Sub)

    mulop  go to state 88
    divop  go to state 89
    Sub    go to state 117


state 105

   56 term: term mulop factor . Mult
   77 Mult: .

    $default  reduce using rule 77 (Mult)

    Mult  go to state 118


state 106

   57 term: term divop factor . Div
   78 Div: .

    $default  reduce using rule 78 (Div)

    Div  go to state 119


state 107

   44 expression: . var '=' expression Assign
   45           | . simple_expression
   46 var: . PID ID
   47    | . PID ID '[' expression ']' Array_access
   47    | PID ID '[' . expression ']' Array_access
   48 simple_expression: . additive_expression lt additive_expression Lt
   49                  | . additive_expression eq additive_expression Eq
   50                  | . additive_expression
   52 additive_expression: . additive_expression addop term Add
   53                    | . additive_expression subop term Sub
   54                    | . term
   56 term: . term mulop factor Mult
   57     | . term divop factor Div
   58     | . factor
   60 factor: . '(' expression ')'
   61       | . var
   62       | . call
   63       | . Num
   64 call: . PID ID '(' args ')'
   73 PID: .  [ID]
   89 Num: . Save_constant NUM
   90 Save_constant: .  [NUM]

    '('  shift, and go to state 44

    NUM       reduce using rule 90 (Save_constant)
    $default  reduce using rule 73 (PID)

    expression           go to state 120
    var                  go to state 58
    simple_expression    go to state 59
    additive_expression  go to state 60
    term                 go to state 62
    factor               go to state 63
    call                 go to state 64
    PID                  go to state 65
    Num                  go to state 66
    Save_constant        go to state 18


state 108

   44 expression: . var '=' expression Assign
   45           | . simple_expression
   46 var: . PID ID
   47    | . PID ID '[' expression ']' Array_access
   48 simple_expression: . additive_expression lt additive_expression Lt
   49                  | . additive_expression eq additive_expression Eq
   50                  | . additive_expression
   52 additive_expression: . additive_expression addop term Add
   53                    | . additive_expression subop term Sub
   54                    | . term
   56 term: . term mulop factor Mult
   57     | . term divop factor Div
   58     | . factor
   60 factor: . '(' expression ')'
   61       | . var
   62       | . call
   63       | . Num
   64 call: . PID ID '(' args ')'
   64     | PID ID '(' . args ')'
   65 args: . arg_list
   66     | .  [')']
   67 arg_list: . arg_list ',' expression
   68         | . expression
   73 PID: .  [ID]
   89 Num: . Save_constant NUM
   90 Save_constant: .  [NUM]

    '('  shift, and go to state 44

    NUM       reduce using rule 90 (Save_constant)
    ID        reduce using rule 73 (PID)
    $default  reduce using rule 66 (args)

    expression           go to state 121
    var                  go to state 58
    simple_expression    go to state 59
    additive_expression  go to state 60
    term                 go to state 62
    factor               go to state 63
    call                 go to state 64
    args                 go to state 122
    arg_list             go to state 123
    PID                  go to state 65
    Num                  go to state 66
    Save_constant        go to state 18


state 109

   34 iteration_stmt: Jmp_save "while" Label . '(' expression ')' Save statement While

    '('  shift, and go to state 124


state 110

   37 switch_stmt: Jmp_save "switch" '(' . expression ')' Add_scope '{' "case" Num Eq_switch ':' Save statement_list case_stmts default_stmt '}' Switch_Jmp
   38            | Jmp_save "switch" '(' . expression ')' Add_scope '{' "default" ':' statement_list '}' Switch_Jmp
   44 expression: . var '=' expression Assign
   45           | . simple_expression
   46 var: . PID ID
   47    | . PID ID '[' expression ']' Array_access
   48 simple_expression: . additive_expression lt additive_expression Lt
   49                  | . additive_expression eq additive_expression Eq
   50                  | . additive_expression
   52 additive_expression: . additive_expression addop term Add
   53                    | . additive_expression subop term Sub
   54                    | . term
   56 term: . term mulop factor Mult
   57     | . term divop factor Div
   58     | . factor
   60 factor: . '(' expression ')'
   61       | . var
   62       | . call
   63       | . Num
   64 call: . PID ID '(' args ')'
   73 PID: .  [ID]
   89 Num: . Save_constant NUM
   90 Save_constant: .  [NUM]

    '('  shift, and go to state 44

    NUM       reduce using rule 90 (Save_constant)
    $default  reduce using rule 73 (PID)

    expression           go to state 125
    var                  go to state 58
    simple_expression    go to state 59
    additive_expression  go to state 60
    term                 go to state 62
    factor               go to state 63
    call                 go to state 64
    PID                  go to state 65
    Num                  go to state 66
    Save_constant        go to state 18


state 111

   32 selection_stmt: "if" '(' expression ')' . Save statement "endif" Jpf
   33               | "if" '(' expression ')' . Save statement "else" Jpf_save statement Jp "endif"
   81 Save: .

    $default  reduce using rule 81 (Save)

    Save  go to state 126


state 112

   55 output_stmt: "output" '(' simple_expression ')' . ';' Print

    ';'  shift, and go to state 127


state 113

   44 expression: var '=' expression Assign .

    $default  reduce using rule 44 (expression)


state 114

   48 simple_expression: additive_expression lt additive_expression Lt .

    $default  reduce using rule 48 (simple_expression)


state 115

   49 simple_expression: additive_expression eq additive_expression Eq .

    $default  reduce using rule 49 (simple_expression)


state 116

   52 additive_expression: additive_expression addop term Add .

    $default  reduce using rule 52 (additive_expression)


state 117

   53 additive_expression: additive_expression subop term Sub .

    $default  reduce using rule 53 (additive_expression)


state 118

   56 term: term mulop factor Mult .

    $default  reduce using rule 56 (term)


state 119

   57 term: term divop factor Div .

    $default  reduce using rule 57 (term)


state 120

   47 var: PID ID '[' expression . ']' Array_access

    ']'  shift, and go to state 128


state 121

   68 arg_list: expression .

    $default  reduce using rule 68 (arg_list)


state 122

   64 call: PID ID '(' args . ')'

    ')'  shift, and go to state 129


state 123

   65 args: arg_list .  [')']
   67 arg_list: arg_list . ',' expression

    ','  shift, and go to state 130

    $default  reduce using rule 65 (args)


state 124

   34 iteration_stmt: Jmp_save "while" Label '(' . expression ')' Save statement While
   44 expression: . var '=' expression Assign
   45           | . simple_expression
   46 var: . PID ID
   47    | . PID ID '[' expression ']' Array_access
   48 simple_expression: . additive_expression lt additive_expression Lt
   49                  | . additive_expression eq additive_expression Eq
   50                  | . additive_expression
   52 additive_expression: . additive_expression addop term Add
   53                    | . additive_expression subop term Sub
   54                    | . term
   56 term: . term mulop factor Mult
   57     | . term divop factor Div
   58     | . factor
   60 factor: . '(' expression ')'
   61       | . var
   62       | . call
   63       | . Num
   64 call: . PID ID '(' args ')'
   73 PID: .  [ID]
   89 Num: . Save_constant NUM
   90 Save_constant: .  [NUM]

    '('  shift, and go to state 44

    NUM       reduce using rule 90 (Save_constant)
    $default  reduce using rule 73 (PID)

    expression           go to state 131
    var                  go to state 58
    simple_expression    go to state 59
    additive_expression  go to state 60
    term                 go to state 62
    factor               go to state 63
    call                 go to state 64
    PID                  go to state 65
    Num                  go to state 66
    Save_constant        go to state 18


state 125

   37 switch_stmt: Jmp_save "switch" '(' expression . ')' Add_scope '{' "case" Num Eq_switch ':' Save statement_list case_stmts default_stmt '}' Switch_Jmp
   38            | Jmp_save "switch" '(' expression . ')' Add_scope '{' "default" ':' statement_list '}' Switch_Jmp

    ')'  shift, and go to state 132


state 126

   17 compound_stmt: . Add_scope '{' local_declarations statement_list '}' Reduce_scope
   22 statement: . expression_stmt
   23          | . compound_stmt
   24          | . selection_stmt
   25          | . iteration_stmt
   26          | . return_stmt
   27          | . switch_stmt
   28          | . output_stmt
   29 expression_stmt: . expression ';' Mark_assignment
   30                | . "break" ';' Break
   31                | . ';'
   32 selection_stmt: . "if" '(' expression ')' Save statement "endif" Jpf
   32               | "if" '(' expression ')' Save . statement "endif" Jpf
   33               | . "if" '(' expression ')' Save statement "else" Jpf_save statement Jp "endif"
   33               | "if" '(' expression ')' Save . statement "else" Jpf_save statement Jp "endif"
   34 iteration_stmt: . Jmp_save "while" Label '(' expression ')' Save statement While
   35 return_stmt: . "return" ';'
   36            | . "return" expression ';'
   37 switch_stmt: . Jmp_save "switch" '(' expression ')' Add_scope '{' "case" Num Eq_switch ':' Save statement_list case_stmts default_stmt '}' Switch_Jmp
   38            | . Jmp_save "switch" '(' expression ')' Add_scope '{' "default" ':' statement_list '}' Switch_Jmp
   44 expression: . var '=' expression Assign
   45           | . simple_expression
   46 var: . PID ID
   47    | . PID ID '[' expression ']' Array_access
   48 simple_expression: . additive_expression lt additive_expression Lt
   49                  | . additive_expression eq additive_expression Eq
   50                  | . additive_expression
   52 additive_expression: . additive_expression addop term Add
   53                    | . additive_expression subop term Sub
   54                    | . term
   55 output_stmt: . "output" '(' simple_expression ')' ';' Print
   56 term: . term mulop factor Mult
   57     | . term divop factor Div
   58     | . factor
   60 factor: . '(' expression ')'
   61       | . var
   62       | . call
   63       | . Num
   64 call: . PID ID '(' args ')'
   73 PID: .  [ID]
   89 Num: . Save_constant NUM
   90 Save_constant: .  [NUM]
   93 Jmp_save: .  ["while", "switch"]
   97 Add_scope: .  ['{']

    ';'       shift, and go to state 43
    '('       shift, and go to state 44
    "break"   shift, and go to state 46
    "if"      shift, and go to state 47
    "return"  shift, and go to state 48
    "output"  shift, and go to state 49

    NUM       reduce using rule 90 (Save_constant)
    ID        reduce using rule 73 (PID)
    '{'       reduce using rule 97 (Add_scope)
    $default  reduce using rule 93 (Jmp_save)

    compound_stmt        go to state 50
    statement            go to state 133
    expression_stmt      go to state 52
    selection_stmt       go to state 53
    iteration_stmt       go to state 54
    return_stmt          go to state 55
    switch_stmt          go to state 56
    expression           go to state 57
    var                  go to state 58
    simple_expression    go to state 59
    additive_expression  go to state 60
    output_stmt          go to state 61
    term                 go to state 62
    factor               go to state 63
    call                 go to state 64
    PID                  go to state 65
    Num                  go to state 66
    Save_constant        go to state 18
    Jmp_save             go to state 67
    Add_scope            go to state 32


state 127

   55 output_stmt: "output" '(' simple_expression ')' ';' . Print
   85 Print: .

    $default  reduce using rule 85 (Print)

    Print  go to state 134


state 128

   47 var: PID ID '[' expression ']' . Array_access
   92 Array_access: .

    $default  reduce using rule 92 (Array_access)

    Array_access  go to state 135


state 129

   64 call: PID ID '(' args ')' .

    $default  reduce using rule 64 (call)


state 130

   44 expression: . var '=' expression Assign
   45           | . simple_expression
   46 var: . PID ID
   47    | . PID ID '[' expression ']' Array_access
   48 simple_expression: . additive_expression lt additive_expression Lt
   49                  | . additive_expression eq additive_expression Eq
   50                  | . additive_expression
   52 additive_expression: . additive_expression addop term Add
   53                    | . additive_expression subop term Sub
   54                    | . term
   56 term: . term mulop factor Mult
   57     | . term divop factor Div
   58     | . factor
   60 factor: . '(' expression ')'
   61       | . var
   62       | . call
   63       | . Num
   64 call: . PID ID '(' args ')'
   67 arg_list: arg_list ',' . expression
   73 PID: .  [ID]
   89 Num: . Save_constant NUM
   90 Save_constant: .  [NUM]

    '('  shift, and go to state 44

    NUM       reduce using rule 90 (Save_constant)
    $default  reduce using rule 73 (PID)

    expression           go to state 136
    var                  go to state 58
    simple_expression    go to state 59
    additive_expression  go to state 60
    term                 go to state 62
    factor               go to state 63
    call                 go to state 64
    PID                  go to state 65
    Num                  go to state 66
    Save_constant        go to state 18


state 131

   34 iteration_stmt: Jmp_save "while" Label '(' expression . ')' Save statement While

    ')'  shift, and go to state 137


state 132

   37 switch_stmt: Jmp_save "switch" '(' expression ')' . Add_scope '{' "case" Num Eq_switch ':' Save statement_list case_stmts default_stmt '}' Switch_Jmp
   38            | Jmp_save "switch" '(' expression ')' . Add_scope '{' "default" ':' statement_list '}' Switch_Jmp
   97 Add_scope: .

    $default  reduce using rule 97 (Add_scope)

    Add_scope  go to state 138


state 133

   32 selection_stmt: "if" '(' expression ')' Save statement . "endif" Jpf
   33               | "if" '(' expression ')' Save statement . "else" Jpf_save statement Jp "endif"

    "endif"  shift, and go to state 139
    "else"   shift, and go to state 140


state 134

   55 output_stmt: "output" '(' simple_expression ')' ';' Print .

    $default  reduce using rule 55 (output_stmt)


state 135

   47 var: PID ID '[' expression ']' Array_access .

    $default  reduce using rule 47 (var)


state 136

   67 arg_list: arg_list ',' expression .

    $default  reduce using rule 67 (arg_list)


state 137

   34 iteration_stmt: Jmp_save "while" Label '(' expression ')' . Save statement While
   81 Save: .

    $default  reduce using rule 81 (Save)

    Save  go to state 141


state 138

   37 switch_stmt: Jmp_save "switch" '(' expression ')' Add_scope . '{' "case" Num Eq_switch ':' Save statement_list case_stmts default_stmt '}' Switch_Jmp
   38            | Jmp_save "switch" '(' expression ')' Add_scope . '{' "default" ':' statement_list '}' Switch_Jmp

    '{'  shift, and go to state 142


state 139

   32 selection_stmt: "if" '(' expression ')' Save statement "endif" . Jpf
   82 Jpf: .

    $default  reduce using rule 82 (Jpf)

    Jpf  go to state 143


state 140

   33 selection_stmt: "if" '(' expression ')' Save statement "else" . Jpf_save statement Jp "endif"
   84 Jpf_save: .

    $default  reduce using rule 84 (Jpf_save)

    Jpf_save  go to state 144


state 141

   17 compound_stmt: . Add_scope '{' local_declarations statement_list '}' Reduce_scope
   22 statement: . expression_stmt
   23          | . compound_stmt
   24          | . selection_stmt
   25          | . iteration_stmt
   26          | . return_stmt
   27          | . switch_stmt
   28          | . output_stmt
   29 expression_stmt: . expression ';' Mark_assignment
   30                | . "break" ';' Break
   31                | . ';'
   32 selection_stmt: . "if" '(' expression ')' Save statement "endif" Jpf
   33               | . "if" '(' expression ')' Save statement "else" Jpf_save statement Jp "endif"
   34 iteration_stmt: . Jmp_save "while" Label '(' expression ')' Save statement While
   34               | Jmp_save "while" Label '(' expression ')' Save . statement While
   35 return_stmt: . "return" ';'
   36            | . "return" expression ';'
   37 switch_stmt: . Jmp_save "switch" '(' expression ')' Add_scope '{' "case" Num Eq_switch ':' Save statement_list case_stmts default_stmt '}' Switch_Jmp
   38            | . Jmp_save "switch" '(' expression ')' Add_scope '{' "default" ':' statement_list '}' Switch_Jmp
   44 expression: . var '=' expression Assign
   45           | . simple_expression
   46 var: . PID ID
   47    | . PID ID '[' expression ']' Array_access
   48 simple_expression: . additive_expression lt additive_expression Lt
   49                  | . additive_expression eq additive_expression Eq
   50                  | . additive_expression
   52 additive_expression: . additive_expression addop term Add
   53                    | . additive_expression subop term Sub
   54                    | . term
   55 output_stmt: . "output" '(' simple_expression ')' ';' Print
   56 term: . term mulop factor Mult
   57     | . term divop factor Div
   58     | . factor
   60 factor: . '(' expression ')'
   61       | . var
   62       | . call
   63       | . Num
   64 call: . PID ID '(' args ')'
   73 PID: .  [ID]
   89 Num: . Save_constant NUM
   90 Save_constant: .  [NUM]
   93 Jmp_save: .  ["while", "switch"]
   97 Add_scope: .  ['{']

    ';'       shift, and go to state 43
    '('       shift, and go to state 44
    "break"   shift, and go to state 46
    "if"      shift, and go to state 47
    "return"  shift, and go to state 48
    "output"  shift, and go to state 49

    NUM       reduce using rule 90 (Save_constant)
    ID        reduce using rule 73 (PID)
    '{'       reduce using rule 97 (Add_scope)
    $default  reduce using rule 93 (Jmp_save)

    compound_stmt        go to state 50
    statement            go to state 145
    expression_stmt      go to state 52
    selection_stmt       go to state 53
    iteration_stmt       go to state 54
    return_stmt          go to state 55
    switch_stmt          go to state 56
    expression           go to state 57
    var                  go to state 58
    simple_expression    go to state 59
    additive_expression  go to state 60
    output_stmt          go to state 61
    term                 go to state 62
    factor               go to state 63
    call                 go to state 64
    PID                  go to state 65
    Num                  go to state 66
    Save_constant        go to state 18
    Jmp_save             go to state 67
    Add_scope            go to state 32


state 142

   37 switch_stmt: Jmp_save "switch" '(' expression ')' Add_scope '{' . "case" Num Eq_switch ':' Save statement_list case_stmts default_stmt '}' Switch_Jmp
   38            | Jmp_save "switch" '(' expression ')' Add_scope '{' . "default" ':' statement_list '}' Switch_Jmp

    "case"     shift, and go to state 146
    "default"  shift, and go to state 147


state 143

   32 selection_stmt: "if" '(' expression ')' Save statement "endif" Jpf .

    $default  reduce using rule 32 (selection_stmt)


state 144

   17 compound_stmt: . Add_scope '{' local_declarations statement_list '}' Reduce_scope
   22 statement: . expression_stmt
   23          | . compound_stmt
   24          | . selection_stmt
   25          | . iteration_stmt
   26          | . return_stmt
   27          | . switch_stmt
   28          | . output_stmt
   29 expression_stmt: . expression ';' Mark_assignment
   30                | . "break" ';' Break
   31                | . ';'
   32 selection_stmt: . "if" '(' expression ')' Save statement "endif" Jpf
   33               | . "if" '(' expression ')' Save statement "else" Jpf_save statement Jp "endif"
   33               | "if" '(' expression ')' Save statement "else" Jpf_save . statement Jp "endif"
   34 iteration_stmt: . Jmp_save "while" Label '(' expression ')' Save statement While
   35 return_stmt: . "return" ';'
   36            | . "return" expression ';'
   37 switch_stmt: . Jmp_save "switch" '(' expression ')' Add_scope '{' "case" Num Eq_switch ':' Save statement_list case_stmts default_stmt '}' Switch_Jmp
   38            | . Jmp_save "switch" '(' expression ')' Add_scope '{' "default" ':' statement_list '}' Switch_Jmp
   44 expression: . var '=' expression Assign
   45           | . simple_expression
   46 var: . PID ID
   47    | . PID ID '[' expression ']' Array_access
   48 simple_expression: . additive_expression lt additive_expression Lt
   49                  | . additive_expression eq additive_expression Eq
   50                  | . additive_expression
   52 additive_expression: . additive_expression addop term Add
   53                    | . additive_expression subop term Sub
   54                    | . term
   55 output_stmt: . "output" '(' simple_expression ')' ';' Print
   56 term: . term mulop factor Mult
   57     | . term divop factor Div
   58     | . factor
   60 factor: . '(' expression ')'
   61       | . var
   62       | . call
   63       | . Num
   64 call: . PID ID '(' args ')'
   73 PID: .  [ID]
   89 Num: . Save_constant NUM
   90 Save_constant: .  [NUM]
   93 Jmp_save: .  ["while", "switch"]
   97 Add_scope: .  ['{']

    ';'       shift, and go to state 43
    '('       shift, and go to state 44
    "break"   shift, and go to state 46
    "if"      shift, and go to state 47
    "return"  shift, and go to state 48
    "output"  shift, and go to state 49

    NUM       reduce using rule 90 (Save_constant)
    ID        reduce using rule 73 (PID)
    '{'       reduce using rule 97 (Add_scope)
    $default  reduce using rule 93 (Jmp_save)

    compound_stmt        go to state 50
    statement            go to state 148
    expression_stmt      go to state 52
    selection_stmt       go to state 53
    iteration_stmt       go to state 54
    return_stmt          go to state 55
    switch_stmt          go to state 56
    expression           go to state 57
    var                  go to state 58
    simple_expression    go to state 59
    additive_expression  go to state 60
    output_stmt          go to state 61
    term                 go to state 62
    factor               go to state 63
    call                 go to state 64
    PID                  go to state 65
    Num                  go to state 66
    Save_constant        go to state 18
    Jmp_save             go to state 67
    Add_scope            go to state 32


state 145

   34 iteration_stmt: Jmp_save "while" Label '(' expression ')' Save statement . While
   79 While: .

    $default  reduce using rule 79 (While)

    While  go to state 149


state 146

   37 switch_stmt: Jmp_save "switch" '(' expression ')' Add_scope '{' "case" . Num Eq_switch ':' Save statement_list case_stmts default_stmt '}' Switch_Jmp
   89 Num: . Save_constant NUM
   90 Save_constant: .

    $default  reduce using rule 90 (Save_constant)

    Num            go to state 150
    Save_constant  go to state 18


state 147

   38 switch_stmt: Jmp_save "switch" '(' expression ')' Add_scope '{' "default" . ':' statement_list '}' Switch_Jmp

    ':'  shift, and go to state 151


state 148

   33 selection_stmt: "if" '(' expression ')' Save statement "else" Jpf_save statement . Jp "endif"
   83 Jp: .

    $default  reduce using rule 83 (Jp)

    Jp  go to state 152


state 149

   34 iteration_stmt: Jmp_save "while" Label '(' expression ')' Save statement While .

    $default  reduce using rule 34 (iteration_stmt)


state 150

   37 switch_stmt: Jmp_save "switch" '(' expression ')' Add_scope '{' "case" Num . Eq_switch ':' Save statement_list case_stmts default_stmt '}' Switch_Jmp
   94 Eq_switch: .

    $default  reduce using rule 94 (Eq_switch)

    Eq_switch  go to state 153


state 151

   20 statement_list: . statement_list statement
   21               | .
   38 switch_stmt: Jmp_save "switch" '(' expression ')' Add_scope '{' "default" ':' . statement_list '}' Switch_Jmp

    $default  reduce using rule 21 (statement_list)

    statement_list  go to state 154


state 152

   33 selection_stmt: "if" '(' expression ')' Save statement "else" Jpf_save statement Jp . "endif"

    "endif"  shift, and go to state 155


state 153

   37 switch_stmt: Jmp_save "switch" '(' expression ')' Add_scope '{' "case" Num Eq_switch . ':' Save statement_list case_stmts default_stmt '}' Switch_Jmp

    ':'  shift, and go to state 156


state 154

   17 compound_stmt: . Add_scope '{' local_declarations statement_list '}' Reduce_scope
   20 statement_list: statement_list . statement
   22 statement: . expression_stmt
   23          | . compound_stmt
   24          | . selection_stmt
   25          | . iteration_stmt
   26          | . return_stmt
   27          | . switch_stmt
   28          | . output_stmt
   29 expression_stmt: . expression ';' Mark_assignment
   30                | . "break" ';' Break
   31                | . ';'
   32 selection_stmt: . "if" '(' expression ')' Save statement "endif" Jpf
   33               | . "if" '(' expression ')' Save statement "else" Jpf_save statement Jp "endif"
   34 iteration_stmt: . Jmp_save "while" Label '(' expression ')' Save statement While
   35 return_stmt: . "return" ';'
   36            | . "return" expression ';'
   37 switch_stmt: . Jmp_save "switch" '(' expression ')' Add_scope '{' "case" Num Eq_switch ':' Save statement_list case_stmts default_stmt '}' Switch_Jmp
   38            | . Jmp_save "switch" '(' expression ')' Add_scope '{' "default" ':' statement_list '}' Switch_Jmp
   38            | Jmp_save "switch" '(' expression ')' Add_scope '{' "default" ':' statement_list . '}' Switch_Jmp
   44 expression: . var '=' expression Assign
   45           | . simple_expression
   46 var: . PID ID
   47    | . PID ID '[' expression ']' Array_access
   48 simple_expression: . additive_expression lt additive_expression Lt
   49                  | . additive_expression eq additive_expression Eq
   50                  | . additive_expression
   52 additive_expression: . additive_expression addop term Add
   53                    | . additive_expression subop term Sub
   54                    | . term
   55 output_stmt: . "output" '(' simple_expression ')' ';' Print
   56 term: . term mulop factor Mult
   57     | . term divop factor Div
   58     | . factor
   60 factor: . '(' expression ')'
   61       | . var
   62       | . call
   63       | . Num
   64 call: . PID ID '(' args ')'
   73 PID: .  [ID]
   89 Num: . Save_constant NUM
   90 Save_constant: .  [NUM]
   93 Jmp_save: .  ["while", "switch"]
   97 Add_scope: .  ['{']

    ';'       shift, and go to state 43
    '('       shift, and go to state 44
    '}'       shift, and go to state 157
    "break"   shift, and go to state 46
    "if"      shift, and go to state 47
    "return"  shift, and go to state 48
    "output"  shift, and go to state 49

    NUM       reduce using rule 90 (Save_constant)
    ID        reduce using rule 73 (PID)
    '{'       reduce using rule 97 (Add_scope)
    $default  reduce using rule 93 (Jmp_save)

    compound_stmt        go to state 50
    statement            go to state 51
    expression_stmt      go to state 52
    selection_stmt       go to state 53
    iteration_stmt       go to state 54
    return_stmt          go to state 55
    switch_stmt          go to state 56
    expression           go to state 57
    var                  go to state 58
    simple_expression    go to state 59
    additive_expression  go to state 60
    output_stmt          go to state 61
    term                 go to state 62
    factor               go to state 63
    call                 go to state 64
    PID                  go to state 65
    Num                  go to state 66
    Save_constant        go to state 18
    Jmp_save             go to state 67
    Add_scope            go to state 32


state 155

   33 selection_stmt: "if" '(' expression ')' Save statement "else" Jpf_save statement Jp "endif" .

    $default  reduce using rule 33 (selection_stmt)


state 156

   37 switch_stmt: Jmp_save "switch" '(' expression ')' Add_scope '{' "case" Num Eq_switch ':' . Save statement_list case_stmts default_stmt '}' Switch_Jmp
   81 Save: .

    $default  reduce using rule 81 (Save)

    Save  go to state 158


state 157

   38 switch_stmt: Jmp_save "switch" '(' expression ')' Add_scope '{' "default" ':' statement_list '}' . Switch_Jmp
   96 Switch_Jmp: .

    $default  reduce using rule 96 (Switch_Jmp)

    Switch_Jmp  go to state 159


state 158

   20 statement_list: . statement_list statement
   21               | .
   37 switch_stmt: Jmp_save "switch" '(' expression ')' Add_scope '{' "case" Num Eq_switch ':' Save . statement_list case_stmts default_stmt '}' Switch_Jmp

    $default  reduce using rule 21 (statement_list)

    statement_list  go to state 160


state 159

   38 switch_stmt: Jmp_save "switch" '(' expression ')' Add_scope '{' "default" ':' statement_list '}' Switch_Jmp .

    $default  reduce using rule 38 (switch_stmt)


state 160

   17 compound_stmt: . Add_scope '{' local_declarations statement_list '}' Reduce_scope
   20 statement_list: statement_list . statement
   22 statement: . expression_stmt
   23          | . compound_stmt
   24          | . selection_stmt
   25          | . iteration_stmt
   26          | . return_stmt
   27          | . switch_stmt
   28          | . output_stmt
   29 expression_stmt: . expression ';' Mark_assignment
   30                | . "break" ';' Break
   31                | . ';'
   32 selection_stmt: . "if" '(' expression ')' Save statement "endif" Jpf
   33               | . "if" '(' expression ')' Save statement "else" Jpf_save statement Jp "endif"
   34 iteration_stmt: . Jmp_save "while" Label '(' expression ')' Save statement While
   35 return_stmt: . "return" ';'
   36            | . "return" expression ';'
   37 switch_stmt: . Jmp_save "switch" '(' expression ')' Add_scope '{' "case" Num Eq_switch ':' Save statement_list case_stmts default_stmt '}' Switch_Jmp
   37            | Jmp_save "switch" '(' expression ')' Add_scope '{' "case" Num Eq_switch ':' Save statement_list . case_stmts default_stmt '}' Switch_Jmp
   38            | . Jmp_save "switch" '(' expression ')' Add_scope '{' "default" ':' statement_list '}' Switch_Jmp
   39 case_stmts: . case_stmts case_stmt
   40           | .  ['}', "case", "default"]
   44 expression: . var '=' expression Assign
   45           | . simple_expression
   46 var: . PID ID
   47    | . PID ID '[' expression ']' Array_access
   48 simple_expression: . additive_expression lt additive_expression Lt
   49                  | . additive_expression eq additive_expression Eq
   50                  | . additive_expression
   52 additive_expression: . additive_expression addop term Add
   53                    | . additive_expression subop term Sub
   54                    | . term
   55 output_stmt: . "output" '(' simple_expression ')' ';' Print
   56 term: . term mulop factor Mult
   57     | . term divop factor Div
   58     | . factor
   60 factor: . '(' expression ')'
   61       | . var
   62       | . call
   63       | . Num
   64 call: . PID ID '(' args ')'
   73 PID: .  [ID]
   89 Num: . Save_constant NUM
   90 Save_constant: .  [NUM]
   93 Jmp_save: .  ["while", "switch"]
   97 Add_scope: .  ['{']

    ';'       shift, and go to state 43
    '('       shift, and go to state 44
    "break"   shift, and go to state 46
    "if"      shift, and go to state 47
    "return"  shift, and go to state 48
    "output"  shift, and go to state 49

    NUM       reduce using rule 90 (Save_constant)
    ID        reduce using rule 73 (PID)
    '{'       reduce using rule 97 (Add_scope)
    "while"   reduce using rule 93 (Jmp_save)
    "switch"  reduce using rule 93 (Jmp_save)
    $default  reduce using rule 40 (case_stmts)

    compound_stmt        go to state 50
    statement            go to state 51
    expression_stmt      go to state 52
    selection_stmt       go to state 53
    iteration_stmt       go to state 54
    return_stmt          go to state 55
    switch_stmt          go to state 56
    case_stmts           go to state 161
    expression           go to state 57
    var                  go to state 58
    simple_expression    go to state 59
    additive_expression  go to state 60
    output_stmt          go to state 61
    term                 go to state 62
    factor               go to state 63
    call                 go to state 64
    PID                  go to state 65
    Num                  go to state 66
    Save_constant        go to state 18
    Jmp_save             go to state 67
    Add_scope            go to state 32


state 161

   37 switch_stmt: Jmp_save "switch" '(' expression ')' Add_scope '{' "case" Num Eq_switch ':' Save statement_list case_stmts . default_stmt '}' Switch_Jmp
   39 case_stmts: case_stmts . case_stmt
   41 case_stmt: . Jpf "case" Num Eq_switch ':' Save statement_list
   42 default_stmt: . Jpf "default" ':' statement_list
   43             | .  ['}']
   82 Jpf: .  ["case", "default"]

    '}'       reduce using rule 43 (default_stmt)
    $default  reduce using rule 82 (Jpf)

    case_stmt     go to state 162
    default_stmt  go to state 163
    Jpf           go to state 164


state 162

   39 case_stmts: case_stmts case_stmt .

    $default  reduce using rule 39 (case_stmts)


state 163

   37 switch_stmt: Jmp_save "switch" '(' expression ')' Add_scope '{' "case" Num Eq_switch ':' Save statement_list case_stmts default_stmt . '}' Switch_Jmp

    '}'  shift, and go to state 165


state 164

   41 case_stmt: Jpf . "case" Num Eq_switch ':' Save statement_list
   42 default_stmt: Jpf . "default" ':' statement_list

    "case"     shift, and go to state 166
    "default"  shift, and go to state 167


state 165

   37 switch_stmt: Jmp_save "switch" '(' expression ')' Add_scope '{' "case" Num Eq_switch ':' Save statement_list case_stmts default_stmt '}' . Switch_Jmp
   96 Switch_Jmp: .

    $default  reduce using rule 96 (Switch_Jmp)

    Switch_Jmp  go to state 168


state 166

   41 case_stmt: Jpf "case" . Num Eq_switch ':' Save statement_list
   89 Num: . Save_constant NUM
   90 Save_constant: .

    $default  reduce using rule 90 (Save_constant)

    Num            go to state 169
    Save_constant  go to state 18


state 167

   42 default_stmt: Jpf "default" . ':' statement_list

    ':'  shift, and go to state 170


state 168

   37 switch_stmt: Jmp_save "switch" '(' expression ')' Add_scope '{' "case" Num Eq_switch ':' Save statement_list case_stmts default_stmt '}' Switch_Jmp .

    $default  reduce using rule 37 (switch_stmt)


state 169

   41 case_stmt: Jpf "case" Num . Eq_switch ':' Save statement_list
   94 Eq_switch: .

    $default  reduce using rule 94 (Eq_switch)

    Eq_switch  go to state 171


state 170

   20 statement_list: . statement_list statement
   21               | .
   42 default_stmt: Jpf "default" ':' . statement_list

    $default  reduce using rule 21 (statement_list)

    statement_list  go to state 172


state 171

   41 case_stmt: Jpf "case" Num Eq_switch . ':' Save statement_list

    ':'  shift, and go to state 173


state 172

   17 compound_stmt: . Add_scope '{' local_declarations statement_list '}' Reduce_scope
   20 statement_list: statement_list . statement
   22 statement: . expression_stmt
   23          | . compound_stmt
   24          | . selection_stmt
   25          | . iteration_stmt
   26          | . return_stmt
   27          | . switch_stmt
   28          | . output_stmt
   29 expression_stmt: . expression ';' Mark_assignment
   30                | . "break" ';' Break
   31                | . ';'
   32 selection_stmt: . "if" '(' expression ')' Save statement "endif" Jpf
   33               | . "if" '(' expression ')' Save statement "else" Jpf_save statement Jp "endif"
   34 iteration_stmt: . Jmp_save "while" Label '(' expression ')' Save statement While
   35 return_stmt: . "return" ';'
   36            | . "return" expression ';'
   37 switch_stmt: . Jmp_save "switch" '(' expression ')' Add_scope '{' "case" Num Eq_switch ':' Save statement_list case_stmts default_stmt '}' Switch_Jmp
   38            | . Jmp_save "switch" '(' expression ')' Add_scope '{' "default" ':' statement_list '}' Switch_Jmp
   42 default_stmt: Jpf "default" ':' statement_list .  ['}']
   44 expression: . var '=' expression Assign
   45           | . simple_expression
   46 var: . PID ID
   47    | . PID ID '[' expression ']' Array_access
   48 simple_expression: . additive_expression lt additive_expression Lt
   49                  | . additive_expression eq additive_expression Eq
   50                  | . additive_expression
   52 additive_expression: . additive_expression addop term Add
   53                    | . additive_expression subop term Sub
   54                    | . term
   55 output_stmt: . "output" '(' simple_expression ')' ';' Print
   56 term: . term mulop factor Mult
   57     | . term divop factor Div
   58     | . factor
   60 factor: . '(' expression ')'
   61       | . var
   62       | . call
   63       | . Num
   64 call: . PID ID '(' args ')'
   73 PID: .  [ID]
   89 Num: . Save_constant NUM
   90 Save_constant: .  [NUM]
   93 Jmp_save: .  ["while", "switch"]
   97 Add_scope: .  ['{']

    ';'       shift, and go to state 43
    '('       shift, and go to state 44
    "break"   shift, and go to state 46
    "if"      shift, and go to state 47
    "return"  shift, and go to state 48
    "output"  shift, and go to state 49

    NUM       reduce using rule 90 (Save_constant)
    ID        reduce using rule 73 (PID)
    '{'       reduce using rule 97 (Add_scope)
    '}'       reduce using rule 42 (default_stmt)
    $default  reduce using rule 93 (Jmp_save)

    compound_stmt        go to state 50
    statement            go to state 51
    expression_stmt      go to state 52
    selection_stmt       go to state 53
    iteration_stmt       go to state 54
    return_stmt          go to state 55
    switch_stmt          go to state 56
    expression           go to state 57
    var                  go to state 58
    simple_expression    go to state 59
    additive_expression  go to state 60
    output_stmt          go to state 61
    term                 go to state 62
    factor               go to state 63
    call                 go to state 64
    PID                  go to state 65
    Num                  go to state 66
    Save_constant        go to state 18
    Jmp_save             go to state 67
    Add_scope            go to state 32


state 173

   41 case_stmt: Jpf "case" Num Eq_switch ':' . Save statement_list
   81 Save: .

    $default  reduce using rule 81 (Save)

    Save  go to state 174


state 174

   20 statement_list: . statement_list statement
   21               | .
   41 case_stmt: Jpf "case" Num Eq_switch ':' Save . statement_list

    $default  reduce using rule 21 (statement_list)

    statement_list  go to state 175


state 175

   17 compound_stmt: . Add_scope '{' local_declarations statement_list '}' Reduce_scope
   20 statement_list: statement_list . statement
   22 statement: . expression_stmt
   23          | . compound_stmt
   24          | . selection_stmt
   25          | . iteration_stmt
   26          | . return_stmt
   27          | . switch_stmt
   28          | . output_stmt
   29 expression_stmt: . expression ';' Mark_assignment
   30                | . "break" ';' Break
   31                | . ';'
   32 selection_stmt: . "if" '(' expression ')' Save statement "endif" Jpf
   33               | . "if" '(' expression ')' Save statement "else" Jpf_save statement Jp "endif"
   34 iteration_stmt: . Jmp_save "while" Label '(' expression ')' Save statement While
   35 return_stmt: . "return" ';'
   36            | . "return" expression ';'
   37 switch_stmt: . Jmp_save "switch" '(' expression ')' Add_scope '{' "case" Num Eq_switch ':' Save statement_list case_stmts default_stmt '}' Switch_Jmp
   38            | . Jmp_save "switch" '(' expression ')' Add_scope '{' "default" ':' statement_list '}' Switch_Jmp
   41 case_stmt: Jpf "case" Num Eq_switch ':' Save statement_list .  ['}', "case", "default"]
   44 expression: . var '=' expression Assign
   45           | . simple_expression
   46 var: . PID ID
   47    | . PID ID '[' expression ']' Array_access
   48 simple_expression: . additive_expression lt additive_expression Lt
   49                  | . additive_expression eq additive_expression Eq
   50                  | . additive_expression
   52 additive_expression: . additive_expression addop term Add
   53                    | . additive_expression subop term Sub
   54                    | . term
   55 output_stmt: . "output" '(' simple_expression ')' ';' Print
   56 term: . term mulop factor Mult
   57     | . term divop factor Div
   58     | . factor
   60 factor: . '(' expression ')'
   61       | . var
   62       | . call
   63       | . Num
   64 call: . PID ID '(' args ')'
   73 PID: .  [ID]
   89 Num: . Save_constant NUM
   90 Save_constant: .  [NUM]
   93 Jmp_save: .  ["while", "switch"]
   97 Add_scope: .  ['{']

    ';'       shift, and go to state 43
    '('       shift, and go to state 44
    "break"   shift, and go to state 46
    "if"      shift, and go to state 47
    "return"  shift, and go to state 48
    "output"  shift, and go to state 49

    NUM       reduce using rule 90 (Save_constant)
    ID        reduce using rule 73 (PID)
    '{'       reduce using rule 97 (Add_scope)
    "while"   reduce using rule 93 (Jmp_save)
    "switch"  reduce using rule 93 (Jmp_save)
    $default  reduce using rule 41 (case_stmt)

    compound_stmt        go to state 50
    statement            go to state 51
    expression_stmt      go to state 52
    selection_stmt       go to state 53
    iteration_stmt       go to state 54
    return_stmt          go to state 55
    switch_stmt          go to state 56
    expression           go to state 57
    var                  go to state 58
    simple_expression    go to state 59
    additive_expression  go to state 60
    output_stmt          go to state 61
    term                 go to state 62
    factor               go to state 63
    call                 go to state 64
    PID                  go to state 65
    Num                  go to state 66
    Save_constant        go to state 18
    Jmp_save             go to state 67
    Add_scope            go to state 32
